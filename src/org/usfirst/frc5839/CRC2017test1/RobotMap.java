// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5839.CRC2017test1;

import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.CANTalon;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotBase;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.drive.RobotDriveBase;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    public static SpeedController driveBaseFrontleft;
    public static SpeedController driveBaseRearleft;
    public static SpeedController driveBaseFrontright;
    public static SpeedController driveBaseRearright;
    public static DifferentialDrive driveBaseRobotDrive41;
    public static TalonSRX gearGearintake;
    public static TalonSRX gearGearlift;
    public static DigitalInput gearSwitch1;
    public static SpeedController climberClimber;
    public static SpeedControllerGroup m_left;
    public static SpeedControllerGroup m_right;


    public static void init() {
    	driveBaseFrontleft = new Talon(2);
    	driveBaseFrontright = new Talon(3);
    	driveBaseRearleft = new Talon(4);
    	driveBaseRearright = new Talon(5);
    	
    	m_left =  new SpeedControllerGroup(driveBaseFrontleft, driveBaseRearleft);
    	m_right = new SpeedControllerGroup(driveBaseFrontright, driveBaseRearright);
    	m_right.setInverted(true);
        driveBaseRobotDrive41 = new DifferentialDrive(m_left, m_right);
        
        driveBaseRobotDrive41.setSafetyEnabled(true);
        driveBaseRobotDrive41.setExpiration(0.1);
        driveBaseRobotDrive41.setMaxOutput(1.0);
        gearGearintake = new TalonSRX(2);
        
        gearGearlift = new TalonSRX(1);
        
        gearSwitch1 = new DigitalInput(0);
        
        climberClimber = new Talon(6);
        
        new Thread(() -> {
			UsbCamera camera = CameraServer.getInstance().startAutomaticCapture("cam1", "/dev/cam1");
			camera.setResolution(640, 480);
			camera.setFPS(30);

			CvSink cvSink = CameraServer.getInstance().getVideo();
			CvSource outputStream = CameraServer.getInstance().putVideo("Blur", 640,
			480);
			Mat source = new Mat();
			Mat output = new Mat();
			while(true) {
			cvSink.grabFrame(source);
			Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY);
			outputStream.putFrame(output);
			}
			}).start();
        
    }
    
}
